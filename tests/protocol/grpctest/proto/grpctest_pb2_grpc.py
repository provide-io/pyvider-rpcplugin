# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from . import grpctest_pb2 as grpctest__pb2

GRPC_GENERATED_VERSION = '1.73.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in grpctest_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TestStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Double = channel.unary_unary(
                '/grpctest.Test/Double',
                request_serializer=grpctest__pb2.TestRequest.SerializeToString,
                response_deserializer=grpctest__pb2.TestResponse.FromString,
                _registered_method=True)
        self.PrintKV = channel.unary_unary(
                '/grpctest.Test/PrintKV',
                request_serializer=grpctest__pb2.PrintKVRequest.SerializeToString,
                response_deserializer=grpctest__pb2.PrintKVResponse.FromString,
                _registered_method=True)
        self.Bidirectional = channel.unary_unary(
                '/grpctest.Test/Bidirectional',
                request_serializer=grpctest__pb2.BidirectionalRequest.SerializeToString,
                response_deserializer=grpctest__pb2.BidirectionalResponse.FromString,
                _registered_method=True)
        self.Stream = channel.stream_stream(
                '/grpctest.Test/Stream',
                request_serializer=grpctest__pb2.TestRequest.SerializeToString,
                response_deserializer=grpctest__pb2.TestResponse.FromString,
                _registered_method=True)
        self.PrintStdio = channel.unary_unary(
                '/grpctest.Test/PrintStdio',
                request_serializer=grpctest__pb2.PrintStdioRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class TestServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Double(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PrintKV(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Bidirectional(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PrintStdio(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TestServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Double': grpc.unary_unary_rpc_method_handler(
                    servicer.Double,
                    request_deserializer=grpctest__pb2.TestRequest.FromString,
                    response_serializer=grpctest__pb2.TestResponse.SerializeToString,
            ),
            'PrintKV': grpc.unary_unary_rpc_method_handler(
                    servicer.PrintKV,
                    request_deserializer=grpctest__pb2.PrintKVRequest.FromString,
                    response_serializer=grpctest__pb2.PrintKVResponse.SerializeToString,
            ),
            'Bidirectional': grpc.unary_unary_rpc_method_handler(
                    servicer.Bidirectional,
                    request_deserializer=grpctest__pb2.BidirectionalRequest.FromString,
                    response_serializer=grpctest__pb2.BidirectionalResponse.SerializeToString,
            ),
            'Stream': grpc.stream_stream_rpc_method_handler(
                    servicer.Stream,
                    request_deserializer=grpctest__pb2.TestRequest.FromString,
                    response_serializer=grpctest__pb2.TestResponse.SerializeToString,
            ),
            'PrintStdio': grpc.unary_unary_rpc_method_handler(
                    servicer.PrintStdio,
                    request_deserializer=grpctest__pb2.PrintStdioRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpctest.Test', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('grpctest.Test', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Test(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Double(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/grpctest.Test/Double',
            grpctest__pb2.TestRequest.SerializeToString,
            grpctest__pb2.TestResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PrintKV(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/grpctest.Test/PrintKV',
            grpctest__pb2.PrintKVRequest.SerializeToString,
            grpctest__pb2.PrintKVResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Bidirectional(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/grpctest.Test/Bidirectional',
            grpctest__pb2.BidirectionalRequest.SerializeToString,
            grpctest__pb2.BidirectionalResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Stream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/grpctest.Test/Stream',
            grpctest__pb2.TestRequest.SerializeToString,
            grpctest__pb2.TestResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PrintStdio(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/grpctest.Test/PrintStdio',
            grpctest__pb2.PrintStdioRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class PingPongStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ping = channel.unary_unary(
                '/grpctest.PingPong/Ping',
                request_serializer=grpctest__pb2.PingRequest.SerializeToString,
                response_deserializer=grpctest__pb2.PongResponse.FromString,
                _registered_method=True)


class PingPongServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PingPongServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=grpctest__pb2.PingRequest.FromString,
                    response_serializer=grpctest__pb2.PongResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpctest.PingPong', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('grpctest.PingPong', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PingPong(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/grpctest.PingPong/Ping',
            grpctest__pb2.PingRequest.SerializeToString,
            grpctest__pb2.PongResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
